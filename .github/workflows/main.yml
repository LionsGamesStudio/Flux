name: Flux Framework CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Run Flux Tests
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout your repository code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Cache Unity Library files (this is already the cache configuration)
      - name: Cache Unity Library
        uses: actions/cache@v4
        with:
          path: Library
          key: Library-${{ hashFiles('ProjectSettings/**', 'Packages/**') }}
          restore-keys: |
            Library-

      # Step 3: Run custom test method
      - name: Run Flux Tests
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          # Specify Unity version
          unityVersion: '2022.3.10f1'
          
          # Explicitly specify the project path
          projectPath: .
          
          # Use `buildMethod` to specify the method to run.
          # This replaces the default method instead of creating a conflict.
          buildMethod: FluxFramework.Testing.FluxTestRunnerCli.RunTests
          
          # You can add additional arguments if needed, but WITHOUT -executeMethod
          customParameters: -nographics -logFile -

      # Step 4: Upload test logs on failure
      - name: Upload Test Logs
        uses: actions/upload-artifact@v4
        if: failure() # Only upload logs if the previous step failed
        with:
          name: Test Execution Logs
          path: |
            ./*.log
            ./artifacts/*.log