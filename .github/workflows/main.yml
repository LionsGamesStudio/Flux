name: Unity Package CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  test:
    name: Run Unity Tests on ${{ matrix.unity-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        unity-version:
          - 2022.3.21f1  # Minimum supported version
          - 2023.2.20f1  # Latest LTS for compatibility check
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Cache Unity Library
        # Cache the Library folder to speed up subsequent runs
        uses: actions/cache@v4
        with:
          path: TempProject/Library
          key: Library-${{ matrix.unity-version }}-${{ hashFiles('**/ProjectSettings/ProjectVersion.txt') }}
          restore-keys: |
            Library-${{ matrix.unity-version }}-

      - name: Create Unity Project Structure
        run: |
          echo "Setting up temporary Unity project..."
          # Create the required Unity project folders
          mkdir -p TempProject/Assets
          mkdir -p TempProject/Packages
          mkdir -p TempProject/ProjectSettings
          
          # Copy the package source code into the Packages folder
          # This ensures the package is tested in isolation
          rsync -r --exclude '.git' --exclude '.github' --exclude 'TempProject' . TempProject/Packages/com.fluxframework.core/
          
          # Create a basic package manifest to resolve dependencies
          echo "Creating package manifest (manifest.json)..."
          cat > TempProject/Packages/manifest.json << EOF
          {
            "dependencies": {
              "com.fluxframework.core": "file:com.fluxframework.core",
              "com.unity.nuget.newtonsoft-json": "3.2.1",
              "com.unity.ugui": "1.0.0",
              "com.unity.textmeshpro": "3.0.6",
              "com.unity.visualscripting": "1.9.1"
            },
            "testables": [
              "com.fluxframework.core"
            ]
          }
          EOF
          
          # Copy pre-configured project settings from the .ci folder
          echo "Copying project settings..."
          cp .ci/ProjectSettings.asset TempProject/ProjectSettings/ProjectSettings.asset
          cp .ci/ProjectVersion.txt TempProject/ProjectSettings/ProjectVersion.txt

          # Dynamically set the Unity editor version for the current job
          echo "Setting project version to ${{ matrix.unity-version }}"
          sed -i "s/m_EditorVersion:.*/m_EditorVersion: ${{ matrix.unity-version }}/" TempProject/ProjectSettings/ProjectVersion.txt

      - name: Activate Unity License
        uses: game-ci/unity-activate@v3
        with:
          unityVersion: ${{ matrix.unity-version }}
          # Supply secrets for Unity activation
          unityUsername: ${{ secrets.UNITY_USERNAME }}
          unityPassword: ${{ secrets.UNITY_PASSWORD }}
          unityLicensingServer: ${{ secrets.UNITY_LICENSING_SERVER }}
          unityLicense: ${{ secrets.UNITY_LICENSE }}
          
      - name: Run Unity Tests
        uses: game-ci/unity-test-runner@v4
        id: test-runner
        with:
          projectPath: TempProject
          unityVersion: ${{ matrix.unity-version }}
          testMode: editmode
          # Use a custom CLI entry point for running tests
          customParameters: -executeMethod FluxFramework.Testing.FluxTestRunnerCli.RunTests

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always() # Always upload artifacts, even if tests fail
        with:
          name: test-results-${{ matrix.unity-version }}
          path: ${{ steps.test-runner.outputs.artifactsPath }}
          retention-days: 7

  package-validation:
    name: Package Validation
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Validate Package Structure
        run: |
          echo "=== Validating Unity Package Structure ==="
          
          # CORRECTED: Check for "Testing" folder instead of "Tests"
          [ -d "Runtime" ] || { echo "❌ Missing Runtime folder"; exit 1; }
          [ -d "Editor" ] || { echo "❌ Missing Editor folder"; exit 1; }
          [ -d "Testing" ] || { echo "❌ Missing Testing folder"; exit 1; }
          echo "✅ Required folders (Runtime, Editor, Testing) exist."

          # Check for the package manifest
          [ -f "package.json" ] || { echo "❌ Missing package.json"; exit 1; }
          echo "✅ package.json exists."
          
          # CORRECTED: Check path using "Testing" folder
          [ -f "Testing/FluxTestRunnerCli.cs" ] || { echo "❌ Missing Testing/FluxTestRunnerCli.cs"; exit 1; }
          echo "✅ Test runner script (FluxTestRunnerCli.cs) found."

          echo "✅ Package structure validation completed successfully."

      - name: Validate package.json
        run: |
          echo "=== Validating package.json ==="
          
          # Ensure jq is installed for JSON parsing
          sudo apt-get update && sudo apt-get install -y jq

          # Validate that package.json is valid JSON
          jq empty package.json || { echo "❌ Invalid JSON in package.json"; exit 1; }
          
          # Extract and verify key properties
          name=$(jq -r '.name' package.json)
          version=$(jq -r '.version' package.json)
          unity=$(jq -r '.unity // "Not specified"' package.json)
          
          echo "- Package name: $name"
          echo "- Package version: $version"
          echo "- Unity version: $unity"
          
          [ "$name" == "com.fluxframework.core" ] || { echo "❌ Expected package name 'com.fluxframework.core', got '$name'"; exit 1; }
          jq -e '.dependencies["com.unity.nuget.newtonsoft-json"]' package.json > /dev/null || { echo "❌ Missing required dependency: com.unity.nuget.newtonsoft-json"; exit 1; }
          
          echo "✅ package.json validation completed successfully."

  publish-check:
    name: Publish Readiness Check
    runs-on: ubuntu-latest
    needs: [test, package-validation]
    if: github.ref == 'refs/heads/main' # Run only on the main branch

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Log final check
        run: echo "✅ All tests and validation steps passed. Ready for publishing."